from enum import Enum
from typing import List


class BodyType(Enum):
    """–ï–Ω—É–º–µ—Ä–∞—Ü—ñ—è —Ç–∏–ø—ñ–≤ –∫—É–∑–æ–≤–∞"""
    SEDAN = "sedan"
    HATCHBACK = "hatchback"
    SUV = "suv"
    COUPE = "coupe"
    CONVERTIBLE = "convertible"
    WAGON = "wagon"


class Engine:
    """–ö–ª–∞—Å –¥–≤–∏–≥—É–Ω–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è"""

    def __init__(self, horsepower: int, volume: float):
        self._horsepower = horsepower  # –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –≤ –∫.—Å.
        self._volume = volume  # –û–±'—î–º –≤ –ª—ñ—Ç—Ä–∞—Ö
        self._rpm = 0.0  # –û–±–µ—Ä—Ç–∏ –≤ —Ö–≤–∏–ª–∏–Ω—É
        self._is_running = False

    def start(self) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–≤–∏–≥—É–Ω"""
        if not self._is_running:
            self._is_running = True
            self._rpm = 800.0  # –•–æ–ª–æ—Å—Ç–∏–π —Ö—ñ–¥
            print(f"üöó Engine started! RPM: {self._rpm}")
            return True
        else:
            print("‚ö†Ô∏è Engine is already running")
            return False

    def stop(self) -> bool:
        """–ó—É–ø–∏–Ω–∏—Ç–∏ –¥–≤–∏–≥—É–Ω"""
        if self._is_running:
            self._is_running = False
            self._rpm = 0.0
            print("üõë Engine stopped")
            return True
        else:
            print("‚ö†Ô∏è Engine is already stopped")
            return False

    def force(self, throttle_position: float = 0.5) -> float:
        """–û–±—á–∏—Å–ª–∏—Ç–∏ —Å–∏–ª—É –¥–≤–∏–≥—É–Ω–∞ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ–ª–æ–∂–µ–Ω–Ω—è –ø–µ–¥–∞–ª—ñ –≥–∞–∑—É"""
        if not self._is_running:
            print("‚ùå Cannot generate force - engine is not running")
            return 0.0

        # –û–±–º–µ–∂—É—î–º–æ –ø–æ–ª–æ–∂–µ–Ω–Ω—è –ø–µ–¥–∞–ª—ñ –≤—ñ–¥ 0 –¥–æ 1
        throttle_position = max(0.0, min(1.0, throttle_position))

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ RPM –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≥–∞–∑—É
        max_rpm = 6000
        self._rpm = 800 + (max_rpm - 800) * throttle_position

        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–∏–ª—É (—Å–ø—Ä–æ—â–µ–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞)
        force = self._horsepower * throttle_position * 0.8

        print(f"‚ö° Engine force: {force:.1f} HP at {self._rpm:.0f} RPM")
        return force

    @property
    def horsepower(self) -> int:
        return self._horsepower

    @property
    def volume(self) -> float:
        return self._volume

    @property
    def rpm(self) -> float:
        return self._rpm

    @property
    def is_running(self) -> bool:
        return self._is_running

    def __str__(self):
        status = "running" if self._is_running else "stopped"
        return f"Engine({self._horsepower}HP, {self._volume}L, {status})"


class Transmission:
    """–ö–ª–∞—Å –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á"""

    def __init__(self, transmission_type: str, gears: int):
        self._type = transmission_type  # "manual", "automatic", "CVT"
        self._gears = gears  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á
        self._current_gear = 0  # 0 = Park/Neutral, 1-N = –ø–µ—Ä–µ–¥–∞—á—ñ

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∏–ø—É
        valid_types = ["manual", "automatic", "CVT"]
        if transmission_type.lower() not in valid_types:
            raise ValueError(f"Invalid transmission type. Must be one of: {valid_types}")

        self._type = transmission_type.lower()

    def shift_gear(self, target_gear: int) -> bool:
        """–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ–¥–∞—á—É"""
        if target_gear < 0 or target_gear > self._gears:
            print(f"‚ùå Invalid gear: {target_gear}. Available gears: 0-{self._gears}")
            return False

        if target_gear == self._current_gear:
            print(f"‚ö†Ô∏è Already in gear {target_gear}")
            return False

        old_gear = self._current_gear
        self._current_gear = target_gear

        gear_name = "Neutral/Park" if target_gear == 0 else f"Gear {target_gear}"
        print(f"üîÑ Shifted from gear {old_gear} to {gear_name}")

        return True

    def shift_up(self) -> bool:
        """–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –Ω–∞ –≤–∏—â—É –ø–µ—Ä–µ–¥–∞—á—É"""
        if self._current_gear < self._gears:
            return self.shift_gear(self._current_gear + 1)
        else:
            print("‚ùå Cannot shift up - already in highest gear")
            return False

    def shift_down(self) -> bool:
        """–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –Ω–∞ –Ω–∏–∂—á—É –ø–µ—Ä–µ–¥–∞—á—É"""
        if self._current_gear > 1:
            return self.shift_gear(self._current_gear - 1)
        else:
            print("‚ùå Cannot shift down - already in lowest gear")
            return False

    @property
    def type(self) -> str:
        return self._type

    @property
    def gears(self) -> int:
        return self._gears

    @property
    def current_gear(self) -> int:
        return self._current_gear

    def __str__(self):
        gear_display = "N/P" if self._current_gear == 0 else str(self._current_gear)
        return f"Transmission({self._type}, {self._gears} gears, current: {gear_display})"


class Body:
    """–ö–ª–∞—Å –∫—É–∑–æ–≤–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è"""

    def __init__(self, body_type: BodyType, color: str):
        self._type = body_type
        self._color = color
        self._doors_open = set()  # –ù–∞–±—ñ—Ä –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –¥–≤–µ—Ä–µ–π
        self._hood_open = False
        self._trunk_open = False

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–≤–µ—Ä–µ–π –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –∫—É–∑–æ–≤–∞
        self._door_count = self._get_door_count(body_type)

    def _get_door_count(self, body_type: BodyType) -> int:
        """–í–∏–∑–Ω–∞—á–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–≤–µ—Ä–µ–π –∑–∞ —Ç–∏–ø–æ–º –∫—É–∑–æ–≤–∞"""
        door_counts = {
            BodyType.SEDAN: 4,
            BodyType.HATCHBACK: 4,
            BodyType.SUV: 4,
            BodyType.COUPE: 2,
            BodyType.CONVERTIBLE: 2,
            BodyType.WAGON: 4
        }
        return door_counts.get(body_type, 4)

    def open_door(self, door_number: int) -> bool:
        """–í—ñ–¥–∫—Ä–∏—Ç–∏ –¥–≤–µ—Ä—ñ –∑–∞ –Ω–æ–º–µ—Ä–æ–º"""
        if door_number < 1 or door_number > self._door_count:
            print(f"‚ùå Invalid door number: {door_number}. This car has {self._door_count} doors")
            return False

        if door_number in self._doors_open:
            print(f"‚ö†Ô∏è Door {door_number} is already open")
            return False

        self._doors_open.add(door_number)
        print(f"üö™ Door {door_number} opened")
        return True

    def close_door(self, door_number: int) -> bool:
        """–ó–∞–∫—Ä–∏—Ç–∏ –¥–≤–µ—Ä—ñ –∑–∞ –Ω–æ–º–µ—Ä–æ–º"""
        if door_number not in self._doors_open:
            print(f"‚ö†Ô∏è Door {door_number} is already closed")
            return False

        self._doors_open.remove(door_number)
        print(f"üö™ Door {door_number} closed")
        return True

    def open_hood(self) -> bool:
        """–í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞–ø–æ—Ç"""
        if self._hood_open:
            print("‚ö†Ô∏è Hood is already open")
            return False

        self._hood_open = True
        print("üîß Hood opened")
        return True

    def close_hood(self) -> bool:
        """–ó–∞–∫—Ä–∏—Ç–∏ –∫–∞–ø–æ—Ç"""
        if not self._hood_open:
            print("‚ö†Ô∏è Hood is already closed")
            return False

        self._hood_open = False
        print("üîß Hood closed")
        return True

    def open_trunk(self) -> bool:
        """–í—ñ–¥–∫—Ä–∏—Ç–∏ –±–∞–≥–∞–∂–Ω–∏–∫"""
        if self._trunk_open:
            print("‚ö†Ô∏è Trunk is already open")
            return False

        self._trunk_open = True
        print("üéí Trunk opened")
        return True

    @property
    def type(self) -> BodyType:
        return self._type

    @property
    def color(self) -> str:
        return self._color

    @property
    def doors_open(self) -> set:
        return self._doors_open.copy()

    @property
    def hood_open(self) -> bool:
        return self._hood_open

    @property
    def door_count(self) -> int:
        return self._door_count

    def __str__(self):
        open_doors = len(self._doors_open)
        return f"Body({self._type.value}, {self._color}, {open_doors}/{self._door_count} doors open)"


class Wheel:
    """–ö–ª–∞—Å –∫–æ–ª–µ—Å–∞"""

    def __init__(self, inner_size: int, outer_size: int, width: int):
        self._inner_size = inner_size  # –†–æ–∑–º—ñ—Ä –¥–∏—Å–∫–∞ (–¥—é–π–º–∏)
        self._outer_size = outer_size  # –ó–æ–≤–Ω—ñ—à–Ω—ñ–π –¥—ñ–∞–º–µ—Ç—Ä —à–∏–Ω–∏ (–¥—é–π–º–∏)
        self._width = width  # –®–∏—Ä–∏–Ω–∞ —à–∏–Ω–∏ (–º–º)
        self._is_mounted = False  # –ß–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–µ—Å–æ
        self._rotation_speed = 0.0  # –®–≤–∏–¥–∫—ñ—Å—Ç—å –æ–±–µ—Ä—Ç–∞–Ω–Ω—è (–æ–±/—Ö–≤)

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–æ–∑–º—ñ—Ä—ñ–≤
        if inner_size <= 0 or outer_size <= 0 or width <= 0:
            raise ValueError("Wheel dimensions must be positive")

        if inner_size >= outer_size:
            raise ValueError("Inner size must be smaller than outer size")

    def mount(self) -> bool:
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–æ–ª–µ—Å–æ"""
        if self._is_mounted:
            print("‚ö†Ô∏è Wheel is already mounted")
            return False

        self._is_mounted = True
        print(f"üîß Wheel mounted ({self._inner_size}\"/{self._outer_size}\" {self._width}mm)")
        return True

    def dismount(self) -> bool:
        """–ó–Ω—è—Ç–∏ –∫–æ–ª–µ—Å–æ"""
        if not self._is_mounted:
            print("‚ö†Ô∏è Wheel is not mounted")
            return False

        if self._rotation_speed > 0:
            print("‚ùå Cannot dismount wheel while rotating")
            return False

        self._is_mounted = False
        print("üîß Wheel dismounted")
        return True

    def rotate(self, speed: float) -> bool:
        """–û–±–µ—Ä—Ç–∞—Ç–∏ –∫–æ–ª–µ—Å–æ –∑ –∑–∞–¥–∞–Ω–æ—é —à–≤–∏–¥–∫—ñ—Å—Ç—é"""
        if not self._is_mounted:
            print("‚ùå Cannot rotate unmounted wheel")
            return False

        if speed < 0:
            print("‚ùå Rotation speed cannot be negative")
            return False

        old_speed = self._rotation_speed
        self._rotation_speed = speed

        if speed == 0 and old_speed > 0:
            print("üõë Wheel stopped")
        elif speed > 0:
            print(f"üå™Ô∏è Wheel rotating at {speed:.1f} RPM")

        return True

    def stop(self) -> bool:
        """–ó—É–ø–∏–Ω–∏—Ç–∏ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –∫–æ–ª–µ—Å–∞"""
        return self.rotate(0.0)

    @property
    def inner_size(self) -> int:
        return self._inner_size

    @property
    def outer_size(self) -> int:
        return self._outer_size

    @property
    def width(self) -> int:
        return self._width

    @property
    def is_mounted(self) -> bool:
        return self._is_mounted

    @property
    def rotation_speed(self) -> float:
        return self._rotation_speed

    def __str__(self):
        status = "mounted" if self._is_mounted else "dismounted"
        return f"Wheel({self._inner_size}\"/{self._outer_size}\" {self._width}mm, {status})"


class Car:
    """–ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è (–∫–æ–º–ø–æ–∑–∏—Ü—ñ—è)"""

    def __init__(self, make: str, model: str, year: int):
        self.make = make
        self.model = model
        self.year = year

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è (–∫–æ–º–ø–æ–∑–∏—Ü—ñ—è)
        # –Ø–∫—â–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –∑–Ω–∏—â—É—î—Ç—å—Å—è, –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Ç–µ–∂ –∑–Ω–∏—â—É—é—Ç—å—Å—è
        self._engine = Engine(horsepower=200, volume=2.0)
        self._transmission = Transmission("automatic", 6)
        self._body = Body(BodyType.SEDAN, "black")

        # –°—Ç–≤–æ—Ä—é—î–º–æ 4 –∫–æ–ª–µ—Å–∞
        self._wheels: List[Wheel] = []
        for i in range(4):
            wheel = Wheel(inner_size=17, outer_size=25, width=225)
            wheel.mount()  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª–µ—Å–æ
            self._wheels.append(wheel)

        self._speed = 0.0  # –ü–æ—Ç–æ—á–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∫–º/–≥–æ–¥
        self._is_moving = False

    def drive(self, throttle: float = 0.3, duration: float = 5.0) -> bool:
        """–ü–æ—ó—Ö–∞—Ç–∏ –Ω–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ"""
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ—ó–∑–¥–∫–æ—é
        if not self._engine.is_running:
            print("‚ùå Cannot drive - engine is not running. Please start the engine first.")
            return False

        if self._transmission.current_gear == 0:
            print("‚ùå Cannot drive - transmission is in neutral/park. Please shift to gear 1.")
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –∫–æ–ª–µ—Å–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ
        unmounted_wheels = [i + 1 for i, wheel in enumerate(self._wheels) if not wheel.is_mounted]
        if unmounted_wheels:
            print(f"‚ùå Cannot drive - wheels {unmounted_wheels} are not mounted")
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –¥–≤–µ—Ä—ñ
        if self._body.doors_open:
            print(f"‚ö†Ô∏è Warning: doors {list(self._body.doors_open)} are open!")

        print(f"\nüöó {self.make} {self.model} is driving...")

        # –û–±—á–∏—Å–ª—é—î–º–æ —Å–∏–ª—É –¥–≤–∏–≥—É–Ω–∞
        force = self._engine.force(throttle)

        # –û–±—á–∏—Å–ª—é—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å (—Å–ø—Ä–æ—â–µ–Ω–∞ —Ñ—ñ–∑–∏–∫–∞)
        gear_ratio = self._transmission.current_gear / self._transmission.gears
        self._speed = force * gear_ratio * 0.5  # –°–ø—Ä–æ—â–µ–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞

        # –û–±–µ—Ä—Ç–∞—î–º–æ –∫–æ–ª–µ—Å–∞
        wheel_rpm = self._speed * 10  # –°–ø—Ä–æ—â–µ–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
        for i, wheel in enumerate(self._wheels):
            wheel.rotate(wheel_rpm)

        self._is_moving = True
        print(f"üèéÔ∏è Driving at {self._speed:.1f} km/h for {duration} seconds")

        # –Ü–º—ñ—Ç–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∏
        import time
        if duration > 0:
            time.sleep(min(duration, 2))  # –ú–∞–∫—Å–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
            self.stop()

        return True

    def stop(self) -> bool:
        """–ó—É–ø–∏–Ω–∏—Ç–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å"""
        if not self._is_moving:
            print("‚ö†Ô∏è Car is already stopped")
            return False

        print("üõë Stopping the car...")

        # –ó—É–ø–∏–Ω—è—î–º–æ –∫–æ–ª–µ—Å–∞
        for wheel in self._wheels:
            wheel.stop()

        self._speed = 0.0
        self._is_moving = False

        # –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ—Å—è –Ω–∞ –Ω–µ–π—Ç—Ä–∞–ª—å
        self._transmission.shift_gear(0)

        print("‚úÖ Car stopped")
        return True

    def start_engine(self) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–≤–∏–≥—É–Ω"""
        return self._engine.start()

    def stop_engine(self) -> bool:
        """–ó—É–ø–∏–Ω–∏—Ç–∏ –¥–≤–∏–≥—É–Ω"""
        if self._is_moving:
            print("‚ùå Cannot stop engine while driving. Stop the car first.")
            return False
        return self._engine.stop()

    # –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    @property
    def engine(self) -> Engine:
        return self._engine

    @property
    def transmission(self) -> Transmission:
        return self._transmission

    @property
    def body(self) -> Body:
        return self._body

    @property
    def wheels(self) -> List[Wheel]:
        return self._wheels.copy()  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–ø—ñ—é –¥–ª—è –±–µ–∑–ø–µ–∫–∏

    @property
    def speed(self) -> float:
        return self._speed

    @property
    def is_moving(self) -> bool:
        return self._is_moving

    def get_status(self) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—è"""
        status = []
        status.append(f"üöó {self.make} {self.model} ({self.year})")
        status.append(f"   Engine: {self._engine}")
        status.append(f"   Transmission: {self._transmission}")
        status.append(f"   Body: {self._body}")
        status.append(f"   Speed: {self._speed:.1f} km/h")

        # –°—Ç–∞—Ç—É—Å –∫–æ–ª—ñ—Å
        for i, wheel in enumerate(self._wheels, 1):
            status.append(f"   Wheel {i}: {wheel}")

        return "\n".join(status)

    def __str__(self):
        return f"{self.make} {self.model} ({self.year}) - {self._speed:.1f} km/h"


class User:
    password: str
    username: str
    email: str
    is_active: bool

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    print("=== –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è ===")
    car = Car("Toyota", "Camry", 2023)
    print(car.get_status())

    print("\n=== –ó–∞–ø—É—Å–∫ –¥–≤–∏–≥—É–Ω–∞ —Ç–∞ –ø–æ—ó–∑–¥–∫–∞ ===")
    car.start_engine()
    car.transmission.shift_gear(1)  # –ü–µ—Ä—à–∞ –ø–µ—Ä–µ–¥–∞—á–∞
    car.drive(throttle=0.4, duration=3)

    print("\n=== –†–æ–±–æ—Ç–∞ –∑ –∫—É–∑–æ–≤–æ–º ===")
    car.body.open_door(1)
    car.body.open_hood()
    car.body.close_door(1)
    car.body.close_hood()

    print("\n=== –†–æ–±–æ—Ç–∞ –∑ –∫–æ–ª–µ—Å–∞–º–∏ ===")
    wheel = car.wheels[0]
    print(f"–ü–µ—Ä—à–µ –∫–æ–ª–µ—Å–æ: {wheel}")

    print("\n=== –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å ===")
    print(car.get_status())

    car.stop_engine()